"""GET     /books/         提供所有记录POST    /books/         新增一条记录GET     /books/<pk>/    提供指定id的记录PUT     /books/<pk>/    修改指定id的记录DELETE  /books/<pk>/    删除指定id的记录响应数据    JSON# 列表视图: 路由后面没有pk/ID# 详情视图: 路由后面 pk/ID"""from rest_framework import statusfrom rest_framework.views import APIViewfrom rest_framework.generics import GenericAPIViewfrom rest_framework.response import Response# url(r'^books/$', views.BookListView.as_view()),from booktest.models import BookInfofrom booktest.serializers import BookInfoModelSerializerclass BookListAPIView(APIView):    """列表视图"""    def get(self, request):        """查询所有"""        books = BookInfo.objects.all()        serializer = BookInfoModelSerializer(books, many=True)        return Response(serializer.data)    def post(self, request):        """新增"""        # 1.获取前端传入的数据        data = request.data        # 2.创建序列化器进行反序列化        serializer = BookInfoModelSerializer(data=data)        # 3.调用序列化器的is_valid进行验证        serializer.is_valid()        # 4.调用序列化的save方法调用create方法        serializer.save()        # 5.响应        return Response(serializer.data, status=status.HTTP_201_CREATED)class BookDetailAPIView(APIView):    """详情视图"""    def get(self, request, pk):        """查询单一"""        # 查询pk指定的模型对象        try:            book = BookInfo.objects.get(pk=pk)        except BookInfo.DoesNotExist:            return Response(status=status.HTTP_404_NOT_FOUND)        # 创建序列化器进行序列化        serializer = BookInfoModelSerializer(book)        # 　响应        return Response(serializer.data)    def put(self, request, pk):        """修改"""        # 1. 查询pk所指定的模型对象        # 2. 获取前端传入的请求数据        try:            book = BookInfo.objects.get(pk=pk)        except BookInfo.DoesNotExist:            return Response(status=status.HTTP_404_NOT_FOUND)        # 3. 创建序列器进行反序列化        serializer = BookInfoModelSerializer(instance=book, data=request.data)        # 4. 校验        serializer.is_valid(raise_exception=True)        serializer.save()        # 5. 响应        return Response(serializer.data)    def delete(self, request, pk):        """删除"""        # 1. 查询pk所指定的模型对象        try:            book = BookInfo.objects.get(pk=pk)        except BookInfo.DoesNotExist:            return Response(status=status.HTTP_404_NOT_FOUND)        # 2. 删除        book.delete()        return Response(status=status.HTTP_204_NO_CONTENT)