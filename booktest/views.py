"""GET     /books/         提供所有记录POST    /books/         新增一条记录GET     /books/<pk>/    提供指定id的记录PUT     /books/<pk>/    修改指定id的记录DELETE  /books/<pk>/    删除指定id的记录响应数据    JSON# 列表视图: 路由后面没有pk/ID# 详情视图: 路由后面 pk/ID"""from django.views import Viewfrom django.http import HttpResponse, JsonResponseimport jsonfrom .models import BookInfoclass BookListView(View):    """列表视图"""    def get(self, request):        """查询所有图书接口"""        # 1.查询出所有图书模型        books = BookInfo.objects.all()        # 2.遍历查询集,取出里面的每个书籍模型对象,把模型对象转换成字典        # 定义一个列表变量用来保存所个字典        book_list = []        for book in books:            book_dict = {                'id': book.id,                'btitle': book.btitle,                'bpub_date': book.bpub_date,                'bread': book.bread,                'bcomment': book.bcomment,                'image': book.image.url if book.image else ''  # None.url            }            book_list.append(book_dict)  # 将转换好的字典添加到列表中        # 3.响应        return JsonResponse(book_list, safe=False)    def post(self, request):        """新增图书接口"""        # 获取前端传入的请求体数据(json) request.body        json_str_bytes = request.body        # 把bytes类型的json字符串转换成json_str        json_str = json_str_bytes.decode()        # 利用json.loads将json字符串转换成json(字典/列表)        book_dict = json.loads(json_str)        # 创建模型对象并保存(把字典转换成模型并存储)        book = BookInfo(            btitle=book_dict['btitle'],            bpub_date=book_dict['bpub_date']        )        book.save()        # 把新增的模型转换成字典        json_dict = {            'id': book.id,            'btitle': book.btitle,            'bpub_date': book.bpub_date,            'bread': book.bread,            'bcomment': book.bcomment,            'image': book.image.url if book.image else ''  # None.url        }        # 响应(把新增的数据再响应回去, 201)        return JsonResponse(json_dict, status=201)class BookDetailView(View):    """详情视图"""    def get(self, request, pk):        """查询指定某个图书接口"""        # 1.获取出指定pk的那个模型对象        try:            book = BookInfo.objects.get(id=pk)        except BookInfo.DoesNotExist:            return HttpResponse({'message': '查询的数据不存在'}, status=404)        # 2.模型对象转字典        book_dict = {            'id': book.id,            'btitle': book.btitle,            'bpub_date': book.bpub_date,            'bread': book.bread,            'bcomment': book.bcomment,            'image': book.image.url if book.image else ''  # None.url        }        # 3.响应        return JsonResponse(book_dict)    def put(self, request, pk):        """修改指定图书接口"""        pass    def delete(self, request, pk):        """删除指定图书接口"""        # 获取要删除的模型对象        try:            book = BookInfo.objects.get(id=pk)        except BookInfo.DoesNotExist:            return HttpResponse({'message': '查询的数据不存在'}, status=404)        # 删除模型对象        book.delete()  # 物理删除(真正从数据库中删除)        # book.is_delete = True        # book.save() (逻辑删除)        # 响应: 删除时不需要有响应体但要指定状态码为 204        return HttpResponse(status=204)